plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'com.diffplug.spotless' version '5.2.0'
    id 'ru.netris.commitlint' version '1.2'
    id 'com.star-zero.gradle.githook' version '1.2.1'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.10.2'
}

group = 'br.com.messiasjunior'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-ui:1.4.5'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
}

test {
    useJUnitPlatform()
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        eclipse()
        custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
        replaceRegex 'Remove empty lines before end of block', '\\n[\\n]+(\\s*})(?=\\n)', '\n$1'
        custom 'Start block fix', { it.replace('{\n\n', '{\n') }
    }
}

tasks.test {
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = '0.8'.toBigDecimal()
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = '0.8'.toBigDecimal()
            }
        }
    }
}

tasks.check {
    dependsOn(tasks.jacocoTestCoverageVerification)
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

githook {
    failOnMissingHooksDir = false
    createHooksDirIfNotExist = false
    hooks {
        create("commit-msg") {
            task = "commitlint -Dmsgfile=\$1"
        }
        create('pre-commit') {
            task = 'spotlessCheck'
        }
    }
}